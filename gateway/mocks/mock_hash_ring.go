// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/michael-diggin/yass/gateway/models (interfaces: HashRing)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/michael-diggin/yass/gateway/models"
	reflect "reflect"
)

// MockHashRing is a mock of HashRing interface
type MockHashRing struct {
	ctrl     *gomock.Controller
	recorder *MockHashRingMockRecorder
}

// MockHashRingMockRecorder is the mock recorder for MockHashRing
type MockHashRingMockRecorder struct {
	mock *MockHashRing
}

// NewMockHashRing creates a new mock instance
func NewMockHashRing(ctrl *gomock.Controller) *MockHashRing {
	mock := &MockHashRing{ctrl: ctrl}
	mock.recorder = &MockHashRingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashRing) EXPECT() *MockHashRingMockRecorder {
	return m.recorder
}

// AddNode mocks base method
func (m *MockHashRing) AddNode(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNode", arg0)
}

// AddNode indicates an expected call of AddNode
func (mr *MockHashRingMockRecorder) AddNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockHashRing)(nil).AddNode), arg0)
}

// GetN mocks base method
func (m *MockHashRing) GetN(arg0 uint32, arg1 int) ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetN", arg0, arg1)
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetN indicates an expected call of GetN
func (mr *MockHashRingMockRecorder) GetN(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetN", reflect.TypeOf((*MockHashRing)(nil).GetN), arg0, arg1)
}

// Hash mocks base method
func (m *MockHashRing) Hash(arg0 string) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockHashRingMockRecorder) Hash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHashRing)(nil).Hash), arg0)
}

// RebalanceInstructions mocks base method
func (m *MockHashRing) RebalanceInstructions(arg0 string) []models.Instruction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebalanceInstructions", arg0)
	ret0, _ := ret[0].([]models.Instruction)
	return ret0
}

// RebalanceInstructions indicates an expected call of RebalanceInstructions
func (mr *MockHashRingMockRecorder) RebalanceInstructions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebalanceInstructions", reflect.TypeOf((*MockHashRing)(nil).RebalanceInstructions), arg0)
}

// RemoveNode mocks base method
func (m *MockHashRing) RemoveNode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode
func (mr *MockHashRingMockRecorder) RemoveNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockHashRing)(nil).RemoveNode), arg0)
}
