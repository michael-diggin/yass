// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/michael-diggin/yass/proto (interfaces: StorageClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/michael-diggin/yass/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockStorageClient is a mock of StorageClient interface
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// AddNode mocks base method
func (m *MockStorageClient) AddNode(arg0 context.Context, arg1 *proto.AddNodeRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNode", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNode indicates an expected call of AddNode
func (mr *MockStorageClientMockRecorder) AddNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockStorageClient)(nil).AddNode), varargs...)
}

// BatchDelete mocks base method
func (m *MockStorageClient) BatchDelete(arg0 context.Context, arg1 *proto.BatchDeleteRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDelete", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDelete indicates an expected call of BatchDelete
func (mr *MockStorageClientMockRecorder) BatchDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockStorageClient)(nil).BatchDelete), varargs...)
}

// BatchGet mocks base method
func (m *MockStorageClient) BatchGet(arg0 context.Context, arg1 *proto.BatchGetRequest, arg2 ...grpc.CallOption) (*proto.BatchGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].(*proto.BatchGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet
func (mr *MockStorageClientMockRecorder) BatchGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockStorageClient)(nil).BatchGet), varargs...)
}

// BatchSend mocks base method
func (m *MockStorageClient) BatchSend(arg0 context.Context, arg1 *proto.BatchSendRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSend", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSend indicates an expected call of BatchSend
func (mr *MockStorageClientMockRecorder) BatchSend(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSend", reflect.TypeOf((*MockStorageClient)(nil).BatchSend), varargs...)
}

// BatchSet mocks base method
func (m *MockStorageClient) BatchSet(arg0 context.Context, arg1 *proto.BatchSetRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSet", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSet indicates an expected call of BatchSet
func (mr *MockStorageClientMockRecorder) BatchSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSet", reflect.TypeOf((*MockStorageClient)(nil).BatchSet), varargs...)
}

// Delete mocks base method
func (m *MockStorageClient) Delete(arg0 context.Context, arg1 *proto.DeleteRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockStorageClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageClient)(nil).Delete), varargs...)
}

// Get mocks base method
func (m *MockStorageClient) Get(arg0 context.Context, arg1 *proto.GetRequest, arg2 ...grpc.CallOption) (*proto.Pair, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageClient)(nil).Get), varargs...)
}

// Set mocks base method
func (m *MockStorageClient) Set(arg0 context.Context, arg1 *proto.SetRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockStorageClientMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageClient)(nil).Set), varargs...)
}
