// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/michael-diggin/yass/common/models (interfaces: ClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/michael-diggin/yass/common/models"
	reflect "reflect"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method
func (m *MockClientInterface) BatchDelete(arg0 context.Context, arg1 int, arg2, arg3 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete
func (mr *MockClientInterfaceMockRecorder) BatchDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockClientInterface)(nil).BatchDelete), arg0, arg1, arg2, arg3)
}

// BatchGet mocks base method
func (m *MockClientInterface) BatchGet(arg0 context.Context, arg1 int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet
func (mr *MockClientInterfaceMockRecorder) BatchGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockClientInterface)(nil).BatchGet), arg0, arg1)
}

// BatchSend mocks base method
func (m *MockClientInterface) BatchSend(arg0 context.Context, arg1, arg2 int, arg3 string, arg4, arg5 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSend", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSend indicates an expected call of BatchSend
func (mr *MockClientInterfaceMockRecorder) BatchSend(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSend", reflect.TypeOf((*MockClientInterface)(nil).BatchSend), arg0, arg1, arg2, arg3, arg4, arg5)
}

// BatchSet mocks base method
func (m *MockClientInterface) BatchSet(arg0 context.Context, arg1 int, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSet indicates an expected call of BatchSet
func (mr *MockClientInterfaceMockRecorder) BatchSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSet", reflect.TypeOf((*MockClientInterface)(nil).BatchSet), arg0, arg1, arg2)
}

// Check mocks base method
func (m *MockClientInterface) Check(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockClientInterfaceMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockClientInterface)(nil).Check), arg0)
}

// Close mocks base method
func (m *MockClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientInterface)(nil).Close))
}

// DelValue mocks base method
func (m *MockClientInterface) DelValue(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelValue indicates an expected call of DelValue
func (mr *MockClientInterfaceMockRecorder) DelValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelValue", reflect.TypeOf((*MockClientInterface)(nil).DelValue), arg0, arg1, arg2)
}

// GetValue mocks base method
func (m *MockClientInterface) GetValue(arg0 context.Context, arg1 string, arg2 int) (*models.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue
func (mr *MockClientInterfaceMockRecorder) GetValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockClientInterface)(nil).GetValue), arg0, arg1, arg2)
}

// SetValue mocks base method
func (m *MockClientInterface) SetValue(arg0 context.Context, arg1 *models.Pair, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue
func (mr *MockClientInterfaceMockRecorder) SetValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockClientInterface)(nil).SetValue), arg0, arg1, arg2)
}
