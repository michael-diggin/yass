// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/michael-diggin/yass/proto (interfaces: CacheClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/michael-diggin/yass/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCacheClient is a mock of CacheClient interface
type MockCacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheClientMockRecorder
}

// MockCacheClientMockRecorder is the mock recorder for MockCacheClient
type MockCacheClientMockRecorder struct {
	mock *MockCacheClient
}

// NewMockCacheClient creates a new mock instance
func NewMockCacheClient(ctrl *gomock.Controller) *MockCacheClient {
	mock := &MockCacheClient{ctrl: ctrl}
	mock.recorder = &MockCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheClient) EXPECT() *MockCacheClientMockRecorder {
	return m.recorder
}

// BatchGet mocks base method
func (m *MockCacheClient) BatchGet(arg0 context.Context, arg1 *proto.BatchGetRequest, arg2 ...grpc.CallOption) (*proto.BatchGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].(*proto.BatchGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet
func (mr *MockCacheClientMockRecorder) BatchGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockCacheClient)(nil).BatchGet), varargs...)
}

// BatchSet mocks base method
func (m *MockCacheClient) BatchSet(arg0 context.Context, arg1 *proto.BatchSetRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSet", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSet indicates an expected call of BatchSet
func (mr *MockCacheClientMockRecorder) BatchSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSet", reflect.TypeOf((*MockCacheClient)(nil).BatchSet), varargs...)
}

// Delete mocks base method
func (m *MockCacheClient) Delete(arg0 context.Context, arg1 *proto.DeleteRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockCacheClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheClient)(nil).Delete), varargs...)
}

// DeleteFollower mocks base method
func (m *MockCacheClient) DeleteFollower(arg0 context.Context, arg1 *proto.Key, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFollower", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFollower indicates an expected call of DeleteFollower
func (mr *MockCacheClientMockRecorder) DeleteFollower(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollower", reflect.TypeOf((*MockCacheClient)(nil).DeleteFollower), varargs...)
}

// Get mocks base method
func (m *MockCacheClient) Get(arg0 context.Context, arg1 *proto.GetRequest, arg2 ...grpc.CallOption) (*proto.Pair, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheClient)(nil).Get), varargs...)
}

// GetFollower mocks base method
func (m *MockCacheClient) GetFollower(arg0 context.Context, arg1 *proto.Key, arg2 ...grpc.CallOption) (*proto.Pair, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollower", varargs...)
	ret0, _ := ret[0].(*proto.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollower indicates an expected call of GetFollower
func (mr *MockCacheClientMockRecorder) GetFollower(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollower", reflect.TypeOf((*MockCacheClient)(nil).GetFollower), varargs...)
}

// Ping mocks base method
func (m *MockCacheClient) Ping(arg0 context.Context, arg1 *proto.Null, arg2 ...grpc.CallOption) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockCacheClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCacheClient)(nil).Ping), varargs...)
}

// Set mocks base method
func (m *MockCacheClient) Set(arg0 context.Context, arg1 *proto.SetRequest, arg2 ...grpc.CallOption) (*proto.Null, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*proto.Null)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockCacheClientMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheClient)(nil).Set), varargs...)
}

// SetFollower mocks base method
func (m *MockCacheClient) SetFollower(arg0 context.Context, arg1 *proto.Pair, arg2 ...grpc.CallOption) (*proto.Key, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFollower", varargs...)
	ret0, _ := ret[0].(*proto.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFollower indicates an expected call of SetFollower
func (mr *MockCacheClientMockRecorder) SetFollower(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFollower", reflect.TypeOf((*MockCacheClient)(nil).SetFollower), varargs...)
}
