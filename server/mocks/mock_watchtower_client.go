// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/michael-diggin/yass/proto (interfaces: WatchTowerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/michael-diggin/yass/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockWatchTowerClient is a mock of WatchTowerClient interface
type MockWatchTowerClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatchTowerClientMockRecorder
}

// MockWatchTowerClientMockRecorder is the mock recorder for MockWatchTowerClient
type MockWatchTowerClientMockRecorder struct {
	mock *MockWatchTowerClient
}

// NewMockWatchTowerClient creates a new mock instance
func NewMockWatchTowerClient(ctrl *gomock.Controller) *MockWatchTowerClient {
	mock := &MockWatchTowerClient{ctrl: ctrl}
	mock.recorder = &MockWatchTowerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatchTowerClient) EXPECT() *MockWatchTowerClientMockRecorder {
	return m.recorder
}

// RegisterNode mocks base method
func (m *MockWatchTowerClient) RegisterNode(arg0 context.Context, arg1 *proto.RegisterNodeRequest, arg2 ...grpc.CallOption) (*proto.RegisterNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterNode", varargs...)
	ret0, _ := ret[0].(*proto.RegisterNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode
func (mr *MockWatchTowerClientMockRecorder) RegisterNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockWatchTowerClient)(nil).RegisterNode), varargs...)
}
